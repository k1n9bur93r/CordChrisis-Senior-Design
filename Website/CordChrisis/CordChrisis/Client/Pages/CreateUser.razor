@page "/signUp"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@using System.Security;
@using System.Security.Cryptography;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject Blazored.SessionStorage.ISessionStorageService Storage


    <body class="login_body">
    <div class="container h-100">
        <div class="d-flex justify-content-center h-200">
            <div class="user_card_signup bg-dark">
                <div class="d-flex justify-content-center">

                    <div class="brand_logo_container">
                        <img src="css/images/CC_logo_Small.png" class="brand_logo" alt="Logo">
                    </div>
                </div>
                <div class="login_header">
                    <div class="mt-lg-4">

                        <div class="d-flex justify-content-center">
                            <h1 class="FancyFont">Sign Up!</h1>
                        </div>

                    </div>
                </div>

                @if (loadingData)
                {
                    <div class="d-flex justify-content-center mt-2">
                        <div class="spinner-grow" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                }

                <div class="d-flex justify-content-center form_container">

                    <form>
                        <div class="input-group mb-4">
                            <div class="input-group-append">
                                <span class="input-group-text bg-success"><i class="fas fa-user"></i></span>
                            </div>
                            <input type="text" name="" class="form-control input_user" placeholder="Email" @bind="email">
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-append">
                                <span class="input-group-text bg-success"><i class="fas fa-user"></i></span>
                            </div>
                            <input type="text" name="" class="form-control input_user" placeholder="Please Enter Username" @bind="username">
                        </div>
                        <div class="input-group mb-2">
                            <div class="input-group-append">
                                <span class="input-group-text bg-success"><i class="fas fa-key"></i></span>
                            </div>
                            <input type="password" name="" class="form-control input_pass" placeholder="Password" maxlength="16" @bind="password">
                        </div>
                        <div class="input-group mb-1">
                            <div class="input-group-append">
                                <span class="input-group-text bg-success"><i class="fas fa-key"></i></span>
                            </div>
                            <input type="password" name="" class="form-control input_pass" placeholder="Re-Enter Password" maxlength="16" @bind="pswrepeat">
                        </div>

                        <div class="">
                            @if (check == false)
                            {
                                @if (alreadyCreated == true)
                                {
                                    <p>Account with this email has already been created, please Login or use a different Email</p>
                                }
                                @if (check == false)
                                {
                                    @if (bademail == true)
                                    {
                                        <p>"@email" Please Enter a Valid Email address, it must be in the format xyz@xyz.com</p>

                                    }
                                    else if (badpassword == true)
                                    {
                                        <p>Please Enter a Password</p>
                                    }
                                    else if (badusername == true)
                                    {
                                        <p>Please Enter a Username!</p>
                                       
                                    }
                                    else if (noteq == true){
                                        <p>Passwords do not Match!</p>
                                    }

                                }
                            }
                        </div>
                        <div class="d-flex justify-content-center mt-3 login_container">
                            <button type="button" button id="adduser" @onclick="addUser" class="btn login_btn bg-success">Login</button>
                        </div>
                    </form>
                </div>

               
            </div>
        </div>
    </div>
</body>


@code {

    User newUser { get; set; }
    string email { get; set; }
    string password { get; set; }
    string pswrepeat { get; set; }
    string username { get; set; }
    bool loadingData = false;
    bool checkData;
    bool check = true;
    bool noteq = false;
    bool bademail = false;
    bool badpassword = false;
    bool badpsswordreapeat = false;
    bool badusername = false;
    bool alreadyCreated = false;
    int length = 16;
    byte [] salt;
    byte[] bytes;

    protected async override void OnInitialized()
    {
        Task<bool> checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning", false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();


    }

    public async Task<bool> addUser()
    {
         check = true;
         noteq = false;
         bademail = false;
         badpassword = false;
         badpsswordreapeat = false;
         badusername = false;
         alreadyCreated = false;

        if (String.IsNullOrWhiteSpace(username))
        {
            badusername = true;
            check = false;
            return check;
        }

        if (email == null || email == String.Empty)
        {
            bademail = true;
            check = false;
            return check;
        }

        if (password == null || password == String.Empty)
        {
            badpassword = true;
            check = false;
            return check;
        }


        if (pswrepeat == null || pswrepeat == String.Empty)
        {
            badpsswordreapeat = true;
            check = false;
            return check;
        }

        if (password != pswrepeat)
        {
            noteq = true;
            check = false;
            return check;
        }

        if(username == null || username == String.Empty)
        {
            badusername = true;
            check = false;
            return check;
        }

        for(int i =0; i < email.Length; i++)
        {
            if(email[i] == '@')
            {
                bademail = false;
                break;
            }
            bademail = true;
        }


        if(bademail == true)
        {
            check = false;
            bademail = true;
            return check;
        }

        String newPass = await GetHash(password);
        Login checkLoginData = new Login();
        Login loginObject = new Login
        {
            Email = email,
            Password = newPass
        };

        CreateAccount AccountHolder = new CreateAccount();
        AccountHolder.loginObject = loginObject;
        AccountHolder.username = username;
        loadingData = true;
        checkData = await Http.PostJsonAsync<bool>("createaccount/post", AccountHolder);
        if (checkData != false)
        {

            checkLoginData = await Http.PostJsonAsync<Login>("userlogin/post", loginObject);
            await Storage.SetItemAsync("LoggedIn", checkLoginData.ID);
            NavigationManager.NavigateTo("/");
            return false;
        }
        else
        {
            check = false;
            alreadyCreated = true;
            loadingData = false;
            return true;
        }
    }



    public async Task<string> GetHash(string password)
    {


        salt = new byte[24];
        RandomNumberGenerator RNG = RandomNumberGenerator.Create();
        RNG.GetBytes(salt);

        byte [] newPassword = System.Text.Encoding.ASCII.GetBytes(password);

        byte[] salted = new byte[newPassword.Length + salt.Length];

        using (SHA256 shaHash = SHA256.Create())
        {
            byte[] hashValue = shaHash.ComputeHash(salted);
            string str = Convert.ToBase64String(hashValue);

            return str;

        };

    }





}

