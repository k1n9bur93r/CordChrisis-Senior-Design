@page "/signUp"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@using System.Security;
@using System.Security.Cryptography;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@inject Blazored.SessionStorage.ISessionStorageService Storage

<div class=" container rounded mt-4 p-1 bg-light">
    <div class="jumbotron">
        <form name="createUser" onsubmit="return false">
            <div class="container">
                <h1>Sign Up</h1>
                <p>Please fill in this form to create an account.</p>
                <hr>


                <ul>
                    <li>
                        <label for="email"><b>Email</b></label>
                        <input type="text" placeholder="Enter Email" name="email" @bind="email" required>
                    </li>

                    <li>
                        <label for="password"><b>Password</b></label>
                        <input type="password" placeholder="Enter Password" name="password" @bind="password" required>

                    </li>



                    <li>

                        <label for="pswrepeat"><b>Repeat Password</b></label>
                        <input type="password" placeholder="Repeat Password" name="pswrepeat" @bind="pswrepeat" required>

                    </li>

                    @if(check== false)
                    {
                        @if (alreadyCreated == true)
                        {
                            <p>Account with this email has already been created, please Login or use a different Email</p>
                        }
                    }
                </ul>

                <p>By creating an account you agree to our <a href="#" style="color:dodgerblue">Terms & Privacy</a>.</p>

                <div>
                    <button id="addUser" class="btn btn-primary" @onclick="addUser"> Sign Up</button>
                </div>

            </div>
        </form>

    </div>
</div>





@code {

    User newUser { get; set; }
    string email { get; set; }
    string password { get; set; }
    string pswrepeat { get; set; }
    bool checkData;
    bool check = true;
    bool noteq = false;
    bool bademail = false;
    bool badpassword = false;
    bool badpsswordreapeat = false;
    bool alreadyCreated = false;
    int length = 16;
    byte [] salt;
    byte[] bytes;

    protected async override void OnInitialized()
    {
        Task<bool> checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning", false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();


    }

    public async Task<bool> addUser()
    {


        if (email == null || email == String.Empty)
        {
            bademail = true;
            check = false;
            return check;
        }

        if (password == null || password == String.Empty)
        {
            badpassword = true;
            check = false;
            return check;
        }


        if (pswrepeat == null || pswrepeat == String.Empty)
        {
            badpsswordreapeat = true;
            check = false;
            return check;
        }

        if (password != pswrepeat)
        {
            noteq = true;
            check = false;
            return check;
        }

        String newPass = await GetHash(password);

        Login loginObject = new Login
        {
            Email = email,
            Password = newPass
        };


        checkData = await Http.PostJsonAsync<bool>("createaccount/post", loginObject);
        if (checkData != false)
        {
            NavigationManager.NavigateTo("/");
            return false;
        }
        else
        {
            check = false;
            alreadyCreated = true; 
            return true;
        }
    }



    public async Task<string> GetHash(string password)
    {


        salt = new byte[24];
        RandomNumberGenerator RNG = RandomNumberGenerator.Create();
        RNG.GetBytes(salt);

        byte [] newPassword = System.Text.Encoding.ASCII.GetBytes(password);

        byte[] salted = new byte[newPassword.Length + salt.Length];

        using (SHA256 shaHash = SHA256.Create())
        {
            byte[] hashValue = shaHash.ComputeHash(salted);
            string str = Convert.ToBase64String(hashValue);

            return str;

        };

    }





}

