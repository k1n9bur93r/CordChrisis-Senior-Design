@page "/game/{GameMode:int}/{MapID}"
@page "/game/{GameMode:int}/"
@using CordChrisis.Shared.Models

@inject IJSRuntime js;
@inject Blazored.SessionStorage.ISessionStorageService Storage;
@inject HttpClient Http;
@inject NavigationManager NavigationManager




<div class="container rounded mt-4 p-1 bg-light">
    <div class="webgl-content">
        <div id="unityContainer" style="width: 100%; height: 500px"></div>
    </div>
    <hr>
    <button class="btn btn-block btn-secondary" @onclick="SetFullScreen"> Click me please</button>
    @if (!MapTask.IsCompleted)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div style="display:none;">
            @WaitForMapData();
        </div>
    }
    else
    {
        @*<button @onclick="SaveUserMapStats" class="btn btn-block btn-primary"> Played the Game, store data for it please!</button>*@
        <div class="mt-2">

            <div class="d-flex justify-content-between">
                <div class="w-50 mr-lg-4 rounded bg-dark">
                    <p class="h3 m-2 "> <strong>@GameMap.Name</strong></p>
                    <p class="h5 m-2 italics ">Created: @GameMap.CreatedDate.ToString("MM/dd/yyyy")</p>
                    <div class=" d-flex justify-content-start align-content-center NeonO " @onclick="(()=>NavigateToAccount(GameMap.Author))">
                        <p class="h4 m-2 italics "> Created By:&nbsp; <em> @GameMap.Author</em></p>
                        @if (String.IsNullOrWhiteSpace(MapMakerIcon))
                        {
                            <img class="rounded-circle border border-light border-4 IconSize m-2" src="~/css/images/loginGenericUserPFP.jpg">
                        }
                        else
                        {
                            <img class="rounded-circle border border-light border-4 IconSize m-2 " src="@MapMakerIcon">
                        }
                    </div>
                </div>
                <div class="d-flex  align-items-stretch rounded bg-dark p-1">
                    <div class="badge badge-primary mr-1 d-flex align-items-center">
                        <p class="h3 " style="margin-bottom:0px!important">Plays :</p> <p class="h3" style="margin-bottom:0px!important"> &nbsp; @GameMap.Plays </p>
                    </div>

                    <div class="badge badge-success mr-1 p-2 ">
                        <div class="d-flex align-items-center">
                            <p class="h3 " style="margin-bottom:0px!important">Rating :</p> <p class="h3" style="margin-bottom:0px!important"> &nbsp; @GameMap.Rating </p>
                        </div>
                        <div class="rating">
                            <input type="radio" name="rating" id="r1" @onclick="GetRating1">
                            <label class="ratinglabel" for="r1"></label>
                            <input type="radio" name="rating" id="r2" @onclick="GetRating2">
                            <label class="ratinglabel" for="r2"></label>
                            <input type="radio" name="rating" id="r3" @onclick="GetRating3">
                            <label class="ratinglabel" for="r3"></label>
                            <input type="radio" name="rating" id="r4" @onclick="GetRating4">
                            <label class="ratinglabel" for="r4"></label>
                            <input type="radio" name="rating" id="r5" @onclick="GetRating5">
                            <label class="ratinglabel" for="r5"></label>
                        </div>
                        <button class="btn btn-outline-light btn-block btn-shadow m-1" style="margin-left:0px!important" @onclick="SubmitUserRating"> Submit Rating</button>
                    </div>

                    <div class="badge badge-warning  d-flex align-items-center">
                        <p class="h3" style="margin-bottom:0px!important">Difficulty :</p> <p class="h3" style="margin-bottom:0px!important"> &nbsp; @DisplayDifficulty </p>
                    </div>
                </div>
            </div>


        </div>
    }
</div>




@code {
    [Parameter]
    public int GameMode { get; set; }
    [Parameter]
    public string MapID { get; set; }
    Map GameMap { get; set; }
    Task<Map> MapTask { get; set; }
    Task<UserStats> MapMakerTask { get; set; }
    string LoggedInUserID = string.Empty;
    UserMapStats userStats = new UserMapStats();
    string DisplayDifficulty = "";
    bool hasStats = false;
    int UserRating = 0;
    string MapMakerIcon;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (!firstRender)
        {
            await this.js.InvokeVoidAsync("start");
            await Storage.SetItemAsync("GameRunning", false);
            await SaveGameActivationToSession();
        }
    }

    async void SetFullScreen()
    {
        await this.js.InvokeVoidAsync("FullScreen");
    }

    protected async override void OnInitialized()
    {
        MapTask = Http.PostJsonAsync<Map>(@"searchpage/readsingle", MapID);
        LoggedInUserID = await GetCurrentLogOnSession();
        if (LoggedInUserID != null)
        {
            userStats.MapID = MapID;
            userStats.UserID = LoggedInUserID;
            userStats = await Http.PostJsonAsync<UserMapStats>(@"usermapstats/get", userStats);
            if (userStats.Plays != 0) hasStats = true; //temp code used to save temp data
            base.OnInitialized();
        }
        base.OnInitialized();
    }

    async Task SaveGameActivationToSession()
    {
        await Storage.SetItemAsync("GameRunning", true);
    }

    async Task<string> GetCurrentLogOnSession()
    {
        return await Storage.GetItemAsync<string>("LoggedIn");
    }


    async Task WaitForMapData()
    {
        Console.WriteLine("Currently waiting for the map");
        GameMap = await MapTask;
        MapMakerTask = Http.PostJsonAsync<UserStats>("userstats/post", GameMap.Author);
        UserStats temp = await MapMakerTask;
        MapMakerIcon = await this.js.InvokeAsync<string>("ConvertByteArrayToImage", temp.UserImage);

        DisplayDifficulty = convertDifficulty(GameMap.Difficulty);
        StateHasChanged();

    }
    string convertDifficulty(int num)
    {
        switch (num)
        {
            case 1:
                return "Easy";
            case 2:
                return "Medium";
            case 3:
                return "Hard";
            case 4:
                return "Ultra";
        }
        return "N/A";
    }


    async Task SaveUserMapStats()
    {
        if (!String.IsNullOrWhiteSpace(LoggedInUserID))
        {
            if (!hasStats)
            {

                Random rnd = new Random();
                userStats = new UserMapStats
                {
                    UserID = LoggedInUserID,
                    MapID = MapID,
                    MaxCombo = rnd.Next(5, 150),
                    Score = rnd.Next(100000, 1000000),
                    Plays = rnd.Next(1, 500),
                    Rating = (decimal)rnd.Next(1, 5),
                    LetterScore = "Z"
                };
            }
            else
            {
                userStats.Plays += 1;
            }

            await Http.PostJsonAsync(@"usermapstats/post", userStats);

        }
    }

    public void NavigateToAccount(string MapMakerID)
    {
        Console.WriteLine(MapMakerID);
        NavigationManager.NavigateTo("/account/" + MapMakerID);
    }

    async Task SubmitUserRating()
    {
        //HTTP CALL HERE TO SUBMIT A RATING, ALSO NEED TO UPDATE THE SQL TO ALLOW TO COUNT THE NUMBER OF RATINGS THAT A MAP HAS
    }

    void GetRating1() => UserRating = 1;
    void GetRating2() => UserRating = 2;
    void GetRating3() => UserRating = 3;
    void GetRating4() => UserRating = 4;
    void GetRating5() => UserRating = 5;

}
