@page "/searchpage"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@using System.Diagnostics
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService Storage;
@inject IJSRuntime js
    <div class="container pt-lg-5">

        <div class="m-1 bg-light rounded p-3">
            <form class="form-inline  mb-2">
                <div class="form-group w-100">

                        <input id="MapNameInput" type="text" class="form-control m-sm-1 " style="width:47%" placeholder="Map Title" @bind="InputtedMapName ">

                    <div class="input-group m-sm-1" style="width:25%">
                        <div class="input-group-prepend">
                                <button class="btn btn-secondary dropdown-toggle"
                                        type="button" id="MapDifficultyDrop" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">
                                    Difficulty
                                </button>
                                <div class="dropdown-menu" aria-labelledby="MapDifficultyDrop">
                                    <a class="dropdown-item" @onclick="UpdateDifficultyEasy">Easy</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyMedium">Medium</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyHard">Hard</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyUltra">Ultra</a>
                                </div>
                        </div>
                        <input id="MapRatingtext" type="text" class="form-control" placeholder="Difficulty" @bind="SelectedDifficulty" disabled="true">
                    </div>
                    <div class="input-group m-sm-1 " style="width:25%">
                        <div class="input-group-prepend">
                                <button class="btn btn-secondary dropdown-toggle"
                                        type="button" id="MapRatingDrop" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">
                                    Rating
                                </button>
                                <div class="dropdown-menu" aria-labelledby="MapRatingDrop">
                                    <a class="dropdown-item" @onclick="UpdateRating1">1</a>
                                    <a class="dropdown-item" @onclick="UpdateRating2">2</a>
                                    <a class="dropdown-item" @onclick="UpdateRating3">3</a>
                                    <a class="dropdown-item" @onclick="UpdateRating4">4</a>
                                    <a class="dropdown-item" @onclick="UpdateRating5">5</a>
                                </div>
                        </div>
                        <input id="MapDifficultyText" type="text" class="form-control" placeholder="Rating" @bind="SelectedRating" disabled="true">
                    </div>
                </div>
            </form>


            <button id="SubmitSearchQuery" style="margin-left:0px!important" class="btn  btn-shadow btn-primary btn-block" @onclick="SubmitSearchQuery"> Submit</button>
        </div>
        <div class="">
            @if (ReturnedMaps == null)
            {
                <div class="rounded bg-light mt-4">

                    @if (loadingData)
                    {
                        <p class="h1 text-muted"> Loading...</p>
                        <div class="d-flex justify-content-center">
                            <div class="spinner-grow" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center p-4 ">
                            <div class="card border-primary bg-light ">
                                <div class="card-header ">

                                    <span class="badge badge-pill badge-light text-muted"> ... </span>
                                    <span class="badge badge-pill badge-light text-muted"> .. </span>
                                    <span class="badge badge-pill badge-light text-muted"> . </span>
                                </div>
                                <div class="card-body">
                                    <p class="h5 text-muted h4"> No Search Results 😔 </p>

                                </div>
                                <div class="card-footer">
                                    <small class="text-light">.....</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="rounded bg-light mt-4 p-1">

                    <div class=" p-2 mb-1 border-bottom-0 rounded bg-secondary ">
                        <div>
                            <span class=" text-light badge badge-info"> Map Name: @DisplayMap</span>
                            <span class=" text-light badge badge-info"> Selected Difficulty: @DisplayDifficulty</span>
                            <span class=" text-light badge badge-info"> Selected Rating: @DisplayRating</span>
                        </div>
                        <div>
                            <span class="display-4"> Found @ReturnedMaps.Count() Maps</span>
                            <span class="h5 text-dark "> in @watch.ElapsedMilliseconds ms</span>
                        </div>
                    </div>
                    @if (ReturnedMaps.Count != 0)
                    {
                        <div class="p-3">
                        Console.WriteLine(ReturnedMaps.Count + " This is how many items were returned.");
                        <MapSearchResultPaginator TotalCards=ReturnedMaps DisplayResults=6 />
                            </div >
                    }
                    else
                    {
                        <div class="d-flex justify-content-center p-3 ">
                            <div class="card border-primary bg-light ">
                                <div class="card-header ">

                                    <span class="badge badge-pill badge-light text-muted"> ... </span>
                                    <span class="badge badge-pill badge-light text-muted"> .. </span>
                                    <span class="badge badge-pill badge-light text-muted"> . </span>
                                </div>
                                <div class="card-body">
                                    <p class="h5 text-muted h4"> No Search Results 😔 </p>

                                </div>
                                <div class="card-footer">
                                    <small class="text-light">.....</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

    </div>


@code {
    string SelectedDifficulty { get; set; }
    int IntDifficulty { get; set; }
    int? SelectedRating { get; set; }
    string InputtedMapName { get; set; }
    bool loadingData = false;
    List<Map> ReturnedMaps;
    Stopwatch watch;
    string DisplayMap;
    int DisplayRating;
    string DisplayDifficulty;
    string GetSession = String.Empty;
    string SessionID = String.Empty;

    void UpdateDifficultyEasy() { SelectedDifficulty = "Easy"; IntDifficulty = 1; }
    void UpdateDifficultyMedium() { SelectedDifficulty = "Medium"; IntDifficulty = 2; }
    void UpdateDifficultyHard() { SelectedDifficulty = "Hard"; IntDifficulty = 3; }
    void UpdateDifficultyUltra() { SelectedDifficulty = "Ultra"; IntDifficulty = 4; }
    void UpdateRating1() => SelectedRating = 1;
    void UpdateRating2() => SelectedRating = 2;
    void UpdateRating3() => SelectedRating = 3;
    void UpdateRating4() => SelectedRating = 4;
    void UpdateRating5() => SelectedRating = 5;


    protected async override void OnInitialized()
    {
       Task<bool> checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning",false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();


    }

    public async Task<List<Map>> SubmitSearchQuery()
    {
        watch = new Stopwatch();

        ReturnedMaps = null;
        //Validate
        if (IntDifficulty == 0) {
            IntDifficulty = 2;
            SelectedDifficulty = "Medium";
        }
        if (SelectedRating == 0||SelectedRating==null) {
            SelectedRating = 4;
        }
        Search UserSearch = new Search
        {
            Name = InputtedMapName,
            Ratings =(double)SelectedRating,
            Difficulty = IntDifficulty
        };
        loadingData = true;
        watch.Start();
        ReturnedMaps = await Http.PostJsonAsync<List<Map>>(@"searchpage/post", UserSearch);
        loadingData = false;
        watch.Stop();
        DisplayDifficulty = SelectedDifficulty;
        DisplayMap = String.IsNullOrWhiteSpace(InputtedMapName)!=true?InputtedMapName:"N/A";
        DisplayRating = (int)SelectedRating;
        return ReturnedMaps;
    }





}
