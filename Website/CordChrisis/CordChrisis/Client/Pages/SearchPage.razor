@page "/searchpage"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@inject HttpClient Http
    <div class="container pt-lg-5">
        <h1>Search Page</h1>
        
        <div class="m-1 bg-light rounded p-2" >
            <form class="form-inline  mb-2">
                <div class="form-group w-100">
                    <div class="input-group ">
                        <input id="MapNameInput" type="text" class="form-control mb-2 mr-sm-2" placeholder="Map Title" @bind="MapName">
                        <label class="sr-only">Difficulty </label>
                    </div>
                    <div class="input-group " >
                        <div class="input-group-prepend">

                            <div class="dropdown">
                                <button class="btn btn-secondary dropdown-toggle"
                                        type="button" id="MapDifficultyDrop" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">
                                    Difficulty
                                </button>
                                <div class="dropdown-menu" aria-labelledby="MapDifficultyDrop">
                                    <a class="dropdown-item" @onclick="UpdateDifficultyEasy">Easy</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyMedium">Medium</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyHard">Hard</a>
                                    <a class="dropdown-item" @onclick="UpdateDifficultyUltra">Ultra</a>
                                </div>
                            </div>

                        </div>
                        <input id="MapRatingtext" type="text" class="form-control mb-2 mr-sm-2" placeholder="Difficulty" @bind="SelectedDifficulty" disabled="true">
                    </div>
                    <div class="input-group ">
                        <div class="input-group-prepend">
                            <div class="dropdown">
                                <button class="btn btn-secondary dropdown-toggle"
                                        type="button" id="MapRatingDrop" data-toggle="dropdown"
                                        aria-haspopup="true" aria-expanded="false">
                                    Rating
                                </button>
                                <div class="dropdown-menu" aria-labelledby="MapRatingDrop">
                                    <a class="dropdown-item" @onclick="UpdateRating1">1</a>
                                    <a class="dropdown-item" @onclick="UpdateRating2">2</a>
                                    <a class="dropdown-item" @onclick="UpdateRating3">3</a>
                                    <a class="dropdown-item" @onclick="UpdateRating4">4</a>
                                    <a class="dropdown-item" @onclick="UpdateRating5">5</a>
                                </div>
                            </div>
                        </div>
                        <input id="MapDifficultyText" type="text" class="form-control mb-2 mr-sm-2" placeholder="Rating" @bind="SelectedRating" disabled="true">
                    </div>
                </div>
            </form>
            <button id="SubmitSearchQuery" class="btn btn-primary btn-block" @onclick="SubmitSearchQuery"> Submit</button>
        </div>
        <div class="">
            @if (ReturnedMaps == null)
            {
                <div class="rounded bg-light mt-4">

                    @if (loadingData)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-grow" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center pt-2 ">
                            <h1 class="text-muted lead"> No Results </h1>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="rounded bg-light mt-4">
                    @if (ReturnedMaps!=null)
                    {
                        Console.WriteLine(ReturnedMaps.Count + " This is how many items were returned.");
                        <MapSearchResults ReturnedMaps=ReturnedMaps />
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <h1>No Maps Found!</h1>
                        </div>
                    }
                </div>
            }
        </div>

    </div>


@code {
    string SelectedDifficulty { get; set; }
    int IntDifficulty { get; set; }
    int? SelectedRating { get; set; }
    string MapName { get; set; }
    bool loadingData = false;
    //string hasError=" ";
    List<Map> ReturnedMaps;

    void UpdateDifficultyEasy() { SelectedDifficulty = "Easy"; IntDifficulty = 1; }
    void UpdateDifficultyMedium() { SelectedDifficulty = "Medium"; IntDifficulty = 2; }
    void UpdateDifficultyHard() { SelectedDifficulty = "Hard"; IntDifficulty = 3; }
    void UpdateDifficultyUltra() { SelectedDifficulty = "Ultra"; IntDifficulty = 4; }
    void UpdateRating1() => SelectedRating = 1;
    void UpdateRating2() => SelectedRating = 2;
    void UpdateRating3() => SelectedRating = 3;
    void UpdateRating4() => SelectedRating = 4;
    void UpdateRating5() => SelectedRating = 5;

    public async Task<List<Map>> SubmitSearchQuery()
    {
        ReturnedMaps = null;
        //Validate
        if (MapName == String.Empty)
        {
            //call alert box
        }
        Search UserSearch = new Search
        {
            Name = MapName,
            Ratings = SelectedRating != null ? (double)SelectedRating : 0.0,
            Difficulty = IntDifficulty
        };
        loadingData = true;
        ReturnedMaps = await Http.PostJsonAsync<List<Map>>(@"searchpage/post", UserSearch);
        loadingData = false;
        return ReturnedMaps;
    }


}
