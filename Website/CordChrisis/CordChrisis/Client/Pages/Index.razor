@page "/"
@inject HttpClient Http;
@using CordChrisis.Shared.Models
@inject Blazored.SessionStorage.ISessionStorageService Storage;
@inject IJSRuntime js
@*<Alert/>*@


<div class=" container rounded mt-4 p-1 bg-light">
    <div class="jumbotron">
        <h1 class="display-3">Chord Crisis</h1>
        <p class="lead">
            Welcome to Chord Chrisis! Search our popular maps, or create your own. Then, challenge your friends to beat your high scores.
        </p>
        <div class="float-container">
            <div class="float-child">
                <p>Find the right Map for you, or make one yourself!</p>
                <div class="single-line">
                    <NavLink href="searchpage">
                        <button class="btn btn-primary btn-lg" href="">Search</button>
                    </NavLink>
                    <NavLink hrev="creator">
                        <button class="btn btn-secondary btn-lg" href="">Map Maker</button>
                    </NavLink>
                </div>
            </div>
            <div class="float-child">
                    @if (UserID == null)
                    {
                        <div class="float-right">
                            <p> Sign in to save your Maps and High Scores!</p>
                            <NavLink href="login">
                                <button class="btn btn-primary btn-lg" href="login">Sign In</button>
                            </NavLink>
                            <p class="font-weight-lighter"> Don't have an account? <a  href="signup" class="text-primary"> Create</a>  one today!</p>
                        </div>
                    }
                    else
                    {
                        <UserCard />
                    }
            </div>
        </div>
        <span class="clearfix"></span>
    </div>

    <div id="DemoImages" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#DemoImages" data-slide-to="0" class="active"></li>
            <li data-target="#DemoImages" data-slide-to="1"></li>
            <li data-target="#DemoImages" data-slide-to="2"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="/css/images/slide1.jpg" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="/css/images/slide2.jpg" alt="Second slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="/css/images/slide3.jpg" alt="Third slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#DemoImages" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#DemoImages" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>


    <div>
        <div class="container rounded bg-dark p-2">
        <p class="display-2 text-warning m-1 text-center"> What People are playing</p>
            </div>
        <div class="bg-light rounded p-4 ">
            <MapSearchResultPaginator FetchPopular=getPopularMaps() DisplayResults=6 />
        </div>
    </div>

</div>

@code{
    string SessionID = String.Empty;
    string GetSession = String.Empty;
    string OldID;
    string UserID;
    User baseUserInfo = null;
    List<Map> popularMaps { get; set; }

    public async Task<List<Map>> getPopularMaps()
    {

        return await Http.GetJsonAsync<List<Map>>(@"searchpage/getpopular");

    }
    protected override async void OnInitialized()
    {
        //await SaveGameActivationToSession();

               Task<bool> checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning",false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();
        base.OnInitialized();

    }

    async Task SaveGameActivationToSession()
    {
        await Storage.SetItemAsync("GameRunning", false);
    }
    async Task SaveLogOnToSession()
    {
        await Storage.SetItemAsync("LoggedIn", SessionID);
    }

    async Task GetCurrentLogOnSession()
    {
        GetSession = await Storage.GetItemAsync<string>("LoggedIn");
    }

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        UserID = await Storage.GetItemAsync<string>("LoggedIn");
        if (UserID != null)
        {
            Console.WriteLine("I'm logged in");
            if (UserID != OldID)
            {
                OldID = UserID;
                baseUserInfo = await Http.PostJsonAsync<User>("user/post", UserID);
                StateHasChanged();
            }
        }
    }
    //protected override void OnInitialized()
    //{
    //    if (firstRender)
    //    { 

    //    }

    //}
}