
@page "/login"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@using System.Security;
@using System.Security.Cryptography;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService Storage
@inject IJSRuntime js


<body class="login_body">
    <div class="container h-100">
        <div class="d-flex justify-content-center h-200">
            <div class="user_card">
                <div class="d-flex justify-content-center">

                    <div class="brand_logo_container">
                        <img src="css/images/CC_logo_Small.png" class="brand_logo" alt="Logo">
                    </div>
                </div>
                <div class="login_header">
                    <div class="mt-lg-4">
                        <div class="d-flex justify-content-center">
                            <h1>Login</h1>
                        </div>

                    </div>
                </div>

                <div class="d-flex justify-content-center form_container">

                    <form>
                        <div class="input-group mb-3">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-user"></i></span>
                            </div>
                            <input type="text" name="" class="form-control input_user" placeholder="Email" @bind="email">
                        </div>
                        <div class="input-group mb-2">
                            <div class="input-group-append">
                                <span class="input-group-text"><i class="fas fa-key"></i></span>
                            </div>
                            <input type="password" name="" class="form-control input_pass" placeholder="Password" maxlength="16" @bind="password">
                        </div>
                        <div class="form-group">
                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" class="custom-control-input" id="customControlInline">
                                <label class="custom-control-label" for="customControlInline">Remember me</label>
                            </div>
                        </div>
                        <div class="">
                            @if (success == false)
                            {
                                @if (isEmail == false && isPassword == false)
                                {
                                    <div>
                                        <p>Email and Password Fields are blank</p>
                                    </div>
                                }
                                else if (isPassword == false)
                                {
                                    <div>
                                        <p>Password Field Cant be Blank</p>
                                    </div>
                                }
                                else if (isEmail == false)
                                {
                                    <div>
                                        <p>Email Field Cant be Blank</p>
                                    </div>
                                }
                                else if (islogin == false)
                                {
                                    <div>
                                        <p>Oh no! You Dumb Bitch, Your Email or Password was Incorrect</p>
                                    </div>

                                }

                            }
                        </div>
                        <div class="d-flex justify-content-center mt-3 login_container">
                            <button type="button" button id="SubmitloginQuery" @onclick="SubmitLoginQuery" class="btn login_btn">Login</button>
                        </div>
                    </form>
                </div>

                <div class="mt-4">
                    <div class="d-flex justify-content-center links">
                        Don't have an account? <a href="signup" class="ml-2">Sign Up</a>
                    </div>

                </div>
                <div class="">
                    @if (loadingData)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-grow" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</body>


@code {

    string email { get; set; }
    string password { get; set; }
    bool success = false;
    bool loadingData = false;
    bool isEmail = true;
    Login checkData = new Login();
    bool isPassword = true;
    bool islogin = true;
    byte[] salt;
    byte[] bytes;

    protected async override void OnInitialized()
    {
        Task<bool> checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning", false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();


    }

    public async Task<bool> SubmitLoginQuery()
    {

        Console.WriteLine("THISISEMAIL");

        Console.WriteLine(email);

        if (email == null && password == null)
        {

            Console.WriteLine(" there both empty!");
            success = false;
            isEmail = false;
            isPassword = false;
            return success;

        }


        if (email == String.Empty && password == String.Empty)
        {

            Console.WriteLine(" there both empty!");
            success = false;
            isEmail = false;
            isPassword = false;
            return success;

        }

        if (email == null || email == String.Empty)
        {


            Console.WriteLine(" Email is empty!");
            success = false;
            isEmail = false;
            isPassword = true;
            return success;
        }


        if (password == null || password == String.Empty)
        {

            Console.WriteLine("password is empty!");
            success = false;
            isPassword = false;
            isEmail = true;
            return success;
        }

        string hashed = await GetHash(password);


        Login loginObject = new Login
        {
            Email = email,
            Password = hashed
        };
        Console.WriteLine(email);

        loadingData = true;
        checkData = await Http.PostJsonAsync<Login>("userlogin/post", loginObject);
        Console.WriteLine(checkData.ID);
        loadingData = false;

        if (checkData.Email == "X")
        {
            islogin = false;
            isEmail = true;
            isPassword = true;
            success = false;
            return success;
        }
        else
        {
            UserStats stats = await Http.PostJsonAsync<UserStats>("userstats/post", checkData.ID.ToString());
            await SaveLogOnToSession(checkData.ID.ToString());
            if (stats.UserImage != null)
            {
                string ImageString = await this.js.InvokeAsync<string>("ConvertByteArrayToImage", stats.UserImage);
                await SaveImageToSession(ImageString);

            }
            NavigationManager.NavigateTo("/");
            success = true;
            return success;
        }

    }
    async Task SaveLogOnToSession(string UserID)
    {
        await Storage.SetItemAsync("LoggedIn", UserID);
    }
    async Task SaveImageToSession(string ImageString)
    {
        await Storage.SetItemAsync("UserPFP", ImageString);
    }


    public async Task<string> GetHash(string password)
    {


        salt = new byte[24];
        RandomNumberGenerator RNG = RandomNumberGenerator.Create();
        RNG.GetBytes(salt);

        byte[] newPassword = System.Text.Encoding.ASCII.GetBytes(password);

        byte[] salted = new byte[newPassword.Length + salt.Length];

        using (SHA256 shaHash = SHA256.Create())
        {
            byte[] hashValue = shaHash.ComputeHash(salted);
            string str = Convert.ToBase64String(hashValue);

            return str;

        };

    }



}

