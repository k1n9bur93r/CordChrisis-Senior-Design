
@page "/login"
@using CordChrisis.Shared
@using CordChrisis.Shared.Models
@using System.Security;
@inject HttpClient Http


<div class="container rounded mt-4 p-1 bg-light">
    <div class="jumbotron">
        <h2>Login!</h2>


        <div class="input-group mb-2 mr-sm-2">
            <input id="LoginInput" type="text" class="form-control mb-2 mr-sm-2" placeholder="Email" @bind="email" />
            <input id="PassWordInput" type="text" class="form-control mb-2 mr-sm-2" placeholder="Password" @bind="password" />
        </div>
        <div>

        </div>

        <div>
            <button id="SubmitloginQuery" class="btn btn-primary" @onclick="SubmitLoginQuery"> Submit</button>
            <button id="CreateAccount" class="btn btn-primary" href ="CreateUser"> Submit</button>
        </div>
    </div>
</div>

    @code {

        string email { get; set; }
        string password { get; set; }
        bool success = false;

        public async Task<Boolean> SubmitLoginQuery()
        {
            success = false;
            if (email != String.Empty)
            {
                //alert email field is empty


                if (password != String.Empty)
                {
                    //alert password is empty


                    SecureString newPass = new SecureString();
                    for (int i = 0; i < password.Length; i++)
                        newPass.AppendChar(password[i]);



                    Login loginObject = new Login
                    {
                        Email = email,
                        Password = newPass
                    };
                    Console.WriteLine("FUCK THIS BOY");
                    // ReturnedMaps = await Http.PostJsonAsync<List<Map>>(@"searchpage/post", UserSearch);
                    success = await Http.PostJsonAsync<bool>("userlogin/post", loginObject);
                }
            }
            Console.WriteLine(success);
            return success;
        }


    }

