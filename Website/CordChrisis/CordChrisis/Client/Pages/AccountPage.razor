@page "/account"
@page "/account/{MapMakerID}"
@using CordChrisis.Shared.Models
@using System.Drawing;
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService Storage
@inject IJSRuntime js;



@if (stats.ID == String.Empty || MapMakerID != null || stats.ID == null)
{
    Console.WriteLine(MapMakerID);
    Console.WriteLine("Were in the account Page");
    Console.WriteLine("1st IF");

    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div style="display:none">
        @waitForLogin();
    </div>
}
else if (hasID == false || MapMakerID == String.Empty)
{
    Console.WriteLine("2 IF");
    Console.WriteLine(MapMakerID);
    Console.WriteLine(hasID);
    <p class="h1"> You are not logged in </p>
    NavigationManager.NavigateTo("/login");

}
else
{
    Console.WriteLine("last else");
    if (stats != null)
    {

        <div class="container  pt-lg-5">
            <div class="row">
                <div class="rounded bg-secondary col-2 pl-1 ">
                    <img class="rounded-circle border border-light border-4" src=@imagefile>
                    @if (MapMakerID != null && UserID != null)
                    {
                        <InputFile OnChange="HandleFile" />
                    }

                </div>

                <div class=" rounded bg-secondary col-10 text-center mx-auto">
                    <span class=" h1"> @baseUserInfo.UserName's Account Page  </span>

                    <span class="text-muted">@ID</span>
                </div>
            </div>
            <div class="rounded bg-light p-3" style="height:100vh">
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Score @stats.TotalScore</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Highest Score @stats.HighestScore</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Max Combo @stats.MaxCombo</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Games Played @stats.TotalGamesPlayed</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Most Played Map @stats.MostPlayedMap</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Maps Made @stats.TotalMapsMade</span>
                </div>
            </div>
        </div>
    }
    else
    {
        //MAKE A BETTER ERROR/ALERT PAGE HERE
        <div class="alert alert-danger" role="alert">
            Unable to find data for a logged in user
        </div>
    }
}

@code {
    [Parameter]
    public string MapMakerID { get; set; }
    [Parameter]
    public Task<string> UserID { get; set; }
    string ID = "Temp";
    bool hasID = false;
    Task<bool> checkGameRunning { get; set; }
    UserStats stats = new UserStats();
    User baseUserInfo = new User();
    string imagefile;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (!firstRender)
        {
            checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");

            bool isRunning = await checkGameRunning;

            if (isRunning)
            {
                await this.js.InvokeVoidAsync("quit");
                await Storage.SetItemAsync("GameRunning", false);
            }
            Console.WriteLine(isRunning);
        }
    }

    async Task waitForLogin()
    {
        ID = await Storage.GetItemAsync<string>("LoggedIn");
        if (MapMakerID != null && MapMakerID != ID)
        {

            stats = await Http.PostJsonAsync<UserStats>(@"userstats/post", MapMakerID);
            baseUserInfo = await Http.PostJsonAsync<User>("user/post", MapMakerID);
            hasID = true;
        }
        else
        {
            if (!String.IsNullOrWhiteSpace(ID))
            {

                Console.WriteLine(ID);
                hasID = true;
                stats = await Http.PostJsonAsync<UserStats>(@"userstats/post", ID);
                Console.WriteLine("after stats");
                baseUserInfo = await Http.PostJsonAsync<User>("user/post", ID);
                
                Console.WriteLine("after baseuserinfo");

            }
            else
            {
                StateHasChanged();
            }
        }

        if (stats.UserImage == null)
        {
            imagefile = "/css/images/pfp2.jpg";
        }
        else
        {

            imagefile = await Storage.GetItemAsync<string>("UserPFP");
        }
        StateHasChanged();
    }




    async Task HandleFile(IFileListEntry[] files)
    {

        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            byte[] newbyte = ms.ToArray();
            stats.UserImage = newbyte;
            await Http.PostJsonAsync<UserStats>(@"userstats/picture", stats);
        }

    }

}
