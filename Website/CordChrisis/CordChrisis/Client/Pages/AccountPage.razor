@page "/account"
@using CordChrisis.Shared.Models
@using System.Drawing;  
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService Storage
@inject IJSRuntime js;


@if (!UserID.IsCompleted)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div style="display:none">
        @waitForLogin();
    </div>
}
else if (!hasID)
{
    <p class="h1"> You are not logged in </p>
    NavigationManager.NavigateTo("/login");

}
else
{
    if (stats != null)
    {
        <div class="container  pt-lg-5">
            <div class="row">
                <div class="rounded bg-secondary col-2 pl-1 ">
                    <img class="rounded-circle border border-light border-4" src="/css/images/pfp2.jpg">
                <InputFile OnChange="HandleFile"/>
                    <p>@status</p>

                </div>
                <div class=" rounded bg-secondary col-10 text-center mx-auto">
                    <span class=" h1"> DOOM's Account Page  </span>
                    <span class="text-muted">@ID</span>
                </div>
            </div>
            <div class="rounded bg-light p-3" style="height:100vh">
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Score @stats.TotalScore</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Highest Score @stats.HighestScore</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Max Combo @stats.MaxCombo</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Games Played @stats.TotalGamesPlayed</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Most Played Map @stats.MostPlayedMap</span>
                </div>
                <div class="m-2 rounded bg-white">
                    <span class="h3"> Total Maps Made @stats.TotalMapsMade</span>
                </div>
            </div>
        </div>
    }
    else
    {
        //MAKE A BETTER ERROR/ALERT PAGE HERE
        <div class="alert alert-danger" role="alert">
            Unable to find data for a logged in user
        </div>
    }
}

@code {

    [Parameter]
    public Task<string> UserID { get; set; }
    string ID = "Temp";
    bool hasID = false;
    Task<bool> checkGameRunning { get; set; }
    UserStats stats = new UserStats();

    protected async override void OnInitialized()
    {
        checkGameRunning = Storage.GetItemAsync<bool>("GameRunning");
        UserID = Storage.GetItemAsync<string>("LoggedIn");
        bool isRunning = await checkGameRunning;

        if (isRunning)
        {
            await this.js.InvokeVoidAsync("quit");
            await Storage.SetItemAsync("GameRunning",false);
            base.OnInitialized();
        }
        Console.WriteLine(isRunning);
        base.OnInitialized();


    }


    async Task waitForLogin()
    {

        ID = await UserID;
        if (!String.IsNullOrWhiteSpace(ID))
        {
            hasID = true;
            stats = await Http.PostJsonAsync<UserStats>(@"userstats/post", ID);
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
        }

    }

    string status;


    async Task HandleFile(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            await Http.PostJsonAsync<UserStats>(@"userstats/post", file);

            status = $"Finished Loading {file.Size} bytes from {file.Name}";
        }


    }

}
