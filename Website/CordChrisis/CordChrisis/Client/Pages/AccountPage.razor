@page "/account"
@using CordChrisis.Shared.Models
@inject HttpClient Http;
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService Storage

@if (!UserID.IsCompleted)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <div style="display:none">
        @waitForLogin();
    </div>
}
else if (!hasID)
{
    <p class="h1"> You are not logged in </p>
    NavigationManager.NavigateTo("/login");

}
else
{
    <div class="container  pt-lg-5">
        <div class="row">
            <div class="rounded bg-secondary col-2 pl-1 ">
                <img class="rounded-circle border border-light border-4" src="/css/images/pfp2.jpg">
            </div>
            <div class=" rounded bg-secondary col-10 text-center mx-auto">
                <span class=" h1"> K1n9Bur93r's Account Page  </span>
            </div>
        </div>
        <div class="rounded bg-light p-3" style="height:100vh">
            <div class="m-2 rounded bg-white">
                <span class="h3"> Total Score</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Highest Score</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Max Combo</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Total Games Played</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Most Played Map</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Total Maps Made</span>
            </div>
            <div class="m-2 rounded bg-white">
                <span class="h3"> Total Games Played</span>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public Task<string> UserID { get; set; }
    string ID="Temp";
    bool hasID = false;
    public UserStats stats = new UserStats();

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        UserID= Storage.GetItemAsync<string>("LoggedIn");
    }


    async Task waitForLogin()
    {

        ID = await UserID;
        if (!String.IsNullOrWhiteSpace(ID))
        {
            hasID = true;
           // stats = await Http.PostJsonAsync<UserStats>(@"", ID);
            StateHasChanged();
        }
        else
        {
            StateHasChanged();
        }

        //Storage Handlers



        async Task<string> GetCurrentLogOnSession()
        {
            return await Storage.GetItemAsync<string>("LoggedIn");
        }

    }

}
