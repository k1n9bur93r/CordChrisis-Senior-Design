@using CordChrisis.Shared.Models
@if (ReturnedMaps == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-grow" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    //@ReturnedMaps=getPopularMaps();

}
else
{
    <div class="card-deck">
        @foreach (Map item in ReturnedMaps)
        {
            <div class="card">
                <div class="card-header">

                    <span class="badge badge-pill badge-primary"> Plays: @item.Plays </span>
                    <span class="badge badge-pill badge-secondary"> Rating: @item.MapRating </span>
                    <span class="badge badge-pill badge-dark"> Difficulty: @convertDifficulty(item.Difficulty)</span>
                </div>
                <div class="card-body">
                    <p class="card-title h3">@item.Name</p>
                    <p class="card-title h5 text-secondary"> Created By: @item.Author</p>
                    <button class="btn btn-outline-primary btn-block"> Play!</button>
                </div>
                <div class="card-footer">
                    <small class="text-muted">Created: @item.CreatedDate.ToString("MM/dd/yyyy")</small>
                </div>
            </div>
        }
    </div>
}
@code {
    [Parameter]
    public List<Map> ReturnedMaps { get; set; }

    string convertDifficulty(int num)
    {
        switch (num)
        {
            case 1:
                return "Easy";

            case 2:
                return "Medium";

            case 3:
                return "Hard";
            case 4:
                return "Ultra";
        }
        return "N/A";
    }
    List<Map> getPopularMaps()
    {

        Task.Delay(5000);
        return new List<Map>();
    }

}
