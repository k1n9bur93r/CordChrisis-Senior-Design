@using CordChrisis.Shared.Models

@if (FetchPopular != null && TotalCards == null)
{
    if (!FetchPopular.IsCompleted)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-grow" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <div style="display:none">
            @waitForPopular();
        </div>
    }


}
else if (TotalCards != null && TotalCards.Count != 0)
{
    <div >
        @if (CurrentCards.Count() != 0)
        {
            <MapSearchResults ReturnedMaps=CurrentCards />
        }
        else
        {
            if (TotalCards.Count() > DisplayResults)
            {
                <MapSearchResults ReturnedMaps=(TotalCards.GetRange(0,DisplayResults)) />
            }
            else
            {
                <MapSearchResults ReturnedMaps=(TotalCards.GetRange(0,TotalCards.Count())) />
            }
        }
        <div class="container-fluid text-center  pb-1">
            <ul class="pagination pagination-sm ">
                @if (currentPaginationSet - DisplayResults > 0)
                {
                    <li class=" mr-2" @onclick="revertResults" style="width:49%">
                        <a class="btn btn-danger btn-shadow btn-block " tabindex="-1" aria-label="Previous">
                            <span aria-hidden="true">Previous</span>
                            <span class="sr-only">Previous</span>
                        </a>
                    </li>
                }
                else
                {
                    <li class=" disabled mr-2" style="width:49%">
                        <a class="btn btn-outline-dark btn-shadow btn-block " tabindex="-1" aria-label="Previous">
                            <span aria-hidden="true">Previous</span>
                            <span class="sr-only">Previous</span>
                        </a>
                    </li>
                }
                @if (currentPaginationSet < TotalCards.Count())
                {
                    <li class=" " @onclick="advanceResults" style="width:49%">
                        <a class="btn btn-success btn-shadow btn-block" aria-label="Next">
                            <span aria-hidden="true">Next</span>
                            <span class="sr-only">Next</span>
                        </a>
                    </li>
                }
                else
                {
                    <li class=" disabled  " style="width:49%">
                        <a class="btn btn-outline-dark btn-shadow btn-block" aria-label="Next">
                            <span aria-hidden="true">Next</span>
                            <span class="sr-only">Next</span>
                        </a>
                    </li>
                }
            </ul>
        </div>
    </div>

 }
 else
 {
  Console.WriteLine("Yes! We have no bananas! ");
 <div class="alert alert-danger" role="alert">
  <p class="h3 text-center">Unable to find new popular maps!</p>
 </div>
    }
@code {

    [Parameter]
    public List<Map> TotalCards { get; set; }

    [Parameter]
    public Task<List<Map>> FetchPopular { get; set; }

    [Parameter]
    public int DisplayResults { get; set; }

    List<Map> CurrentCards = new List<Map>();

    int FlexableAdjust;

    int currentPaginationSet = 0;

    bool endOfList = false;

    bool firstClick = true;
    bool pressBack = false;

    void advanceResults()
    {
        if (firstClick)
        {

            if (currentPaginationSet + DisplayResults > TotalCards.Count())
                return;
            currentPaginationSet += DisplayResults;
            firstClick = false;
        }

        FlexableAdjust = DisplayResults;
        if (currentPaginationSet + DisplayResults > TotalCards.Count())
        {

            FlexableAdjust = DisplayResults - ((currentPaginationSet + DisplayResults) - TotalCards.Count());

            endOfList = true;
        }
        Console.WriteLine("TOTAL RESULTS: " + TotalCards.Count() + " CURRENT DISPLAYED SET From " + currentPaginationSet + " To " + (currentPaginationSet + FlexableAdjust));
    

    CurrentCards = TotalCards.GetRange(currentPaginationSet, FlexableAdjust);
        currentPaginationSet += FlexableAdjust;
        StateHasChanged();

    }

    void revertResults()
    {


        if (currentPaginationSet - DisplayResults < 0)
            return;
        if (endOfList)
        {
            currentPaginationSet -= (FlexableAdjust + DisplayResults);
            endOfList = false;
        }
        else
        {

            currentPaginationSet -= DisplayResults;
        }
        Console.WriteLine("TOTAL RESULTS: " + TotalCards.Count() + " CURRENT DISPLAYED SET From " + (currentPaginationSet) + " To " + (currentPaginationSet + DisplayResults));
        Console.WriteLine("Current paginationset and flex adjust "+currentPaginationSet + " "+FlexableAdjust);
        CurrentCards = TotalCards.GetRange(currentPaginationSet, DisplayResults);

        StateHasChanged();
    }

    async Task<List<Map>> waitForPopular()
    {
        Console.WriteLine("IM HERE");
        TotalCards = await FetchPopular;
        StateHasChanged();
        return TotalCards;
    }
}
